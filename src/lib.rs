// This file was generated by gir (8343e00) from gir-files (71d73f0)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals)]

extern crate cairo_sys as cairo;
extern crate libc;
#[macro_use] extern crate bitflags;
extern crate glib_sys as glib;
extern crate gobject_sys as gobject;
extern crate gio_sys as gio;
extern crate atk_sys as atk;
extern crate gdk_pixbuf_sys as gdk_pixbuf;
extern crate gdk_sys as gdk;
extern crate gtk_sys as gtk;
extern crate pango_sys as pango;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType, Volatile};

// Enums
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSourceBackgroundPatternType {
    None = 0,
    Grid = 1,
}
pub const GTK_SOURCE_BACKGROUND_PATTERN_TYPE_NONE: GtkSourceBackgroundPatternType = GtkSourceBackgroundPatternType::None;
pub const GTK_SOURCE_BACKGROUND_PATTERN_TYPE_GRID: GtkSourceBackgroundPatternType = GtkSourceBackgroundPatternType::Grid;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSourceBracketMatchType {
    None = 0,
    OutOfRange = 1,
    NotFound = 2,
    Found = 3,
}
pub const GTK_SOURCE_BRACKET_MATCH_NONE: GtkSourceBracketMatchType = GtkSourceBracketMatchType::None;
pub const GTK_SOURCE_BRACKET_MATCH_OUT_OF_RANGE: GtkSourceBracketMatchType = GtkSourceBracketMatchType::OutOfRange;
pub const GTK_SOURCE_BRACKET_MATCH_NOT_FOUND: GtkSourceBracketMatchType = GtkSourceBracketMatchType::NotFound;
pub const GTK_SOURCE_BRACKET_MATCH_FOUND: GtkSourceBracketMatchType = GtkSourceBracketMatchType::Found;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSourceChangeCaseType {
    Lower = 0,
    Upper = 1,
    Toggle = 2,
    Title = 3,
}
pub const GTK_SOURCE_CHANGE_CASE_LOWER: GtkSourceChangeCaseType = GtkSourceChangeCaseType::Lower;
pub const GTK_SOURCE_CHANGE_CASE_UPPER: GtkSourceChangeCaseType = GtkSourceChangeCaseType::Upper;
pub const GTK_SOURCE_CHANGE_CASE_TOGGLE: GtkSourceChangeCaseType = GtkSourceChangeCaseType::Toggle;
pub const GTK_SOURCE_CHANGE_CASE_TITLE: GtkSourceChangeCaseType = GtkSourceChangeCaseType::Title;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSourceCompletionError {
    AlreadyBound = 0,
    NotBound = 1,
}
pub const GTK_SOURCE_COMPLETION_ERROR_ALREADY_BOUND: GtkSourceCompletionError = GtkSourceCompletionError::AlreadyBound;
pub const GTK_SOURCE_COMPLETION_ERROR_NOT_BOUND: GtkSourceCompletionError = GtkSourceCompletionError::NotBound;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSourceCompressionType {
    None = 0,
    Gzip = 1,
}
pub const GTK_SOURCE_COMPRESSION_TYPE_NONE: GtkSourceCompressionType = GtkSourceCompressionType::None;
pub const GTK_SOURCE_COMPRESSION_TYPE_GZIP: GtkSourceCompressionType = GtkSourceCompressionType::Gzip;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSourceFileLoaderError {
    TooBig = 0,
    EncodingAutoDetectionFailed = 1,
    ConversionFallback = 2,
}
pub const GTK_SOURCE_FILE_LOADER_ERROR_TOO_BIG: GtkSourceFileLoaderError = GtkSourceFileLoaderError::TooBig;
pub const GTK_SOURCE_FILE_LOADER_ERROR_ENCODING_AUTO_DETECTION_FAILED: GtkSourceFileLoaderError = GtkSourceFileLoaderError::EncodingAutoDetectionFailed;
pub const GTK_SOURCE_FILE_LOADER_ERROR_CONVERSION_FALLBACK: GtkSourceFileLoaderError = GtkSourceFileLoaderError::ConversionFallback;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSourceFileSaverError {
    InvalidChars = 0,
    ExternallyModified = 1,
}
pub const GTK_SOURCE_FILE_SAVER_ERROR_INVALID_CHARS: GtkSourceFileSaverError = GtkSourceFileSaverError::InvalidChars;
pub const GTK_SOURCE_FILE_SAVER_ERROR_EXTERNALLY_MODIFIED: GtkSourceFileSaverError = GtkSourceFileSaverError::ExternallyModified;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSourceGutterRendererAlignmentMode {
    Cell = 0,
    First = 1,
    Last = 2,
}
pub const GTK_SOURCE_GUTTER_RENDERER_ALIGNMENT_MODE_CELL: GtkSourceGutterRendererAlignmentMode = GtkSourceGutterRendererAlignmentMode::Cell;
pub const GTK_SOURCE_GUTTER_RENDERER_ALIGNMENT_MODE_FIRST: GtkSourceGutterRendererAlignmentMode = GtkSourceGutterRendererAlignmentMode::First;
pub const GTK_SOURCE_GUTTER_RENDERER_ALIGNMENT_MODE_LAST: GtkSourceGutterRendererAlignmentMode = GtkSourceGutterRendererAlignmentMode::Last;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSourceNewlineType {
    Lf = 0,
    Cr = 1,
    CrLf = 2,
}
pub const GTK_SOURCE_NEWLINE_TYPE_LF: GtkSourceNewlineType = GtkSourceNewlineType::Lf;
pub const GTK_SOURCE_NEWLINE_TYPE_CR: GtkSourceNewlineType = GtkSourceNewlineType::Cr;
pub const GTK_SOURCE_NEWLINE_TYPE_CR_LF: GtkSourceNewlineType = GtkSourceNewlineType::CrLf;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSourceSmartHomeEndType {
    Disabled = 0,
    Before = 1,
    After = 2,
    Always = 3,
}
pub const GTK_SOURCE_SMART_HOME_END_DISABLED: GtkSourceSmartHomeEndType = GtkSourceSmartHomeEndType::Disabled;
pub const GTK_SOURCE_SMART_HOME_END_BEFORE: GtkSourceSmartHomeEndType = GtkSourceSmartHomeEndType::Before;
pub const GTK_SOURCE_SMART_HOME_END_AFTER: GtkSourceSmartHomeEndType = GtkSourceSmartHomeEndType::After;
pub const GTK_SOURCE_SMART_HOME_END_ALWAYS: GtkSourceSmartHomeEndType = GtkSourceSmartHomeEndType::Always;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSourceViewGutterPosition {
    Lines = -30,
    Marks = -20,
}
pub const GTK_SOURCE_VIEW_GUTTER_POSITION_LINES: GtkSourceViewGutterPosition = GtkSourceViewGutterPosition::Lines;
pub const GTK_SOURCE_VIEW_GUTTER_POSITION_MARKS: GtkSourceViewGutterPosition = GtkSourceViewGutterPosition::Marks;

// Flags
bitflags! {
    #[repr(C)]
    pub flags GtkSourceCompletionActivation: c_uint {
        const GTK_SOURCE_COMPLETION_ACTIVATION_NONE = 0,
        const GTK_SOURCE_COMPLETION_ACTIVATION_INTERACTIVE = 1,
        const GTK_SOURCE_COMPLETION_ACTIVATION_USER_REQUESTED = 2,
    }
}

bitflags! {
    #[repr(C)]
    pub flags GtkSourceDrawSpacesFlags: c_uint {
        const GTK_SOURCE_DRAW_SPACES_SPACE = 1,
        const GTK_SOURCE_DRAW_SPACES_TAB = 2,
        const GTK_SOURCE_DRAW_SPACES_NEWLINE = 4,
        const GTK_SOURCE_DRAW_SPACES_NBSP = 8,
        const GTK_SOURCE_DRAW_SPACES_LEADING = 16,
        const GTK_SOURCE_DRAW_SPACES_TEXT = 32,
        const GTK_SOURCE_DRAW_SPACES_TRAILING = 64,
        const GTK_SOURCE_DRAW_SPACES_ALL = 127,
    }
}

bitflags! {
    #[repr(C)]
    pub flags GtkSourceFileSaverFlags: c_uint {
        const GTK_SOURCE_FILE_SAVER_FLAGS_NONE = 0,
        const GTK_SOURCE_FILE_SAVER_FLAGS_IGNORE_INVALID_CHARS = 1,
        const GTK_SOURCE_FILE_SAVER_FLAGS_IGNORE_MODIFICATION_TIME = 2,
        const GTK_SOURCE_FILE_SAVER_FLAGS_CREATE_BACKUP = 4,
    }
}

bitflags! {
    #[repr(C)]
    pub flags GtkSourceGutterRendererState: c_uint {
        const GTK_SOURCE_GUTTER_RENDERER_STATE_NORMAL = 0,
        const GTK_SOURCE_GUTTER_RENDERER_STATE_CURSOR = 1,
        const GTK_SOURCE_GUTTER_RENDERER_STATE_PRELIT = 2,
        const GTK_SOURCE_GUTTER_RENDERER_STATE_SELECTED = 4,
    }
}

bitflags! {
    #[repr(C)]
    pub flags GtkSourceSortFlags: c_uint {
        const GTK_SOURCE_SORT_FLAGS_NONE = 0,
        const GTK_SOURCE_SORT_FLAGS_CASE_SENSITIVE = 1,
        const GTK_SOURCE_SORT_FLAGS_REVERSE_ORDER = 2,
        const GTK_SOURCE_SORT_FLAGS_REMOVE_DUPLICATES = 4,
    }
}

bitflags! {
    #[repr(C)]
    pub flags GtkSourceSpaceLocationFlags: c_uint {
        const GTK_SOURCE_SPACE_LOCATION_NONE = 0,
        const GTK_SOURCE_SPACE_LOCATION_LEADING = 1,
        const GTK_SOURCE_SPACE_LOCATION_INSIDE_TEXT = 2,
        const GTK_SOURCE_SPACE_LOCATION_TRAILING = 4,
        const GTK_SOURCE_SPACE_LOCATION_ALL = 7,
    }
}

bitflags! {
    #[repr(C)]
    pub flags GtkSourceSpaceTypeFlags: c_uint {
        const GTK_SOURCE_SPACE_TYPE_NONE = 0,
        const GTK_SOURCE_SPACE_TYPE_SPACE = 1,
        const GTK_SOURCE_SPACE_TYPE_TAB = 2,
        const GTK_SOURCE_SPACE_TYPE_NEWLINE = 4,
        const GTK_SOURCE_SPACE_TYPE_NBSP = 8,
        const GTK_SOURCE_SPACE_TYPE_ALL = 15,
    }
}

// Callbacks
pub type GtkSourceMountOperationFactory = Option<unsafe extern "C" fn(*mut GtkSourceFile, gpointer) -> *mut gio::GMountOperation>;

// Records
#[repr(C)]
pub struct GtkSourceBufferClass {
    pub parent_class: gtk::GtkTextBufferClass,
    pub undo: Option<unsafe extern "C" fn(*mut GtkSourceBuffer)>,
    pub redo: Option<unsafe extern "C" fn(*mut GtkSourceBuffer)>,
    pub bracket_matched: Option<unsafe extern "C" fn(*mut GtkSourceBuffer, *mut gtk::GtkTextIter, GtkSourceBracketMatchType)>,
    pub _gtk_source_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_source_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_source_reserved3: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSourceBufferPrivate(c_void);

#[repr(C)]
pub struct GtkSourceCompletionClass {
    pub parent_class: gobject::GObjectClass,
    pub proposal_activated: Option<unsafe extern "C" fn(*mut GtkSourceCompletion, *mut GtkSourceCompletionProvider, *mut GtkSourceCompletionProposal) -> gboolean>,
    pub show: Option<unsafe extern "C" fn(*mut GtkSourceCompletion)>,
    pub hide: Option<unsafe extern "C" fn(*mut GtkSourceCompletion)>,
    pub populate_context: Option<unsafe extern "C" fn(*mut GtkSourceCompletion, *mut GtkSourceCompletionContext)>,
    pub move_cursor: Option<unsafe extern "C" fn(*mut GtkSourceCompletion, gtk::GtkScrollStep, c_int)>,
    pub move_page: Option<unsafe extern "C" fn(*mut GtkSourceCompletion, gtk::GtkScrollStep, c_int)>,
    pub activate_proposal: Option<unsafe extern "C" fn(*mut GtkSourceCompletion)>,
}

#[repr(C)]
pub struct GtkSourceCompletionContextClass {
    pub parent_class: gobject::GInitiallyUnownedClass,
    pub cancelled: Option<unsafe extern "C" fn(*mut GtkSourceCompletionContext)>,
    pub _gtk_source_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_source_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_source_reserved3: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSourceCompletionContextPrivate(c_void);

#[repr(C)]
pub struct GtkSourceCompletionInfoClass {
    pub parent_class: gtk::GtkWindowClass,
    pub before_show: Option<unsafe extern "C" fn(*mut GtkSourceCompletionInfo)>,
}

#[repr(C)]
pub struct GtkSourceCompletionInfoPrivate(c_void);

#[repr(C)]
pub struct GtkSourceCompletionItemClass {
    pub parent_class: gobject::GObjectClass,
}

#[repr(C)]
pub struct GtkSourceCompletionItemPrivate(c_void);

#[repr(C)]
pub struct GtkSourceCompletionPrivate(c_void);

#[repr(C)]
pub struct GtkSourceCompletionProposalIface {
    pub parent: gobject::GTypeInterface,
    pub get_label: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProposal) -> *mut c_char>,
    pub get_markup: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProposal) -> *mut c_char>,
    pub get_text: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProposal) -> *mut c_char>,
    pub get_icon: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProposal) -> *mut gdk_pixbuf::GdkPixbuf>,
    pub get_icon_name: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProposal) -> *mut c_char>,
    pub get_gicon: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProposal) -> *mut gio::GIcon>,
    pub get_info: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProposal) -> *mut c_char>,
    pub hash: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProposal) -> c_uint>,
    pub equal: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProposal, *mut GtkSourceCompletionProposal) -> gboolean>,
    pub changed: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProposal)>,
}

#[repr(C)]
pub struct GtkSourceCompletionProviderIface {
    pub g_iface: gobject::GTypeInterface,
    pub get_name: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProvider) -> *const c_char>,
    pub get_icon: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProvider) -> *mut gdk_pixbuf::GdkPixbuf>,
    pub get_icon_name: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProvider) -> *const c_char>,
    pub get_gicon: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProvider) -> *mut gio::GIcon>,
    pub populate: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProvider, *mut GtkSourceCompletionContext)>,
    pub match_: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProvider, *mut GtkSourceCompletionContext) -> gboolean>,
    pub get_activation: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProvider) -> GtkSourceCompletionActivation>,
    pub get_info_widget: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProvider, *mut GtkSourceCompletionProposal) -> *mut gtk::GtkWidget>,
    pub update_info: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProvider, *mut GtkSourceCompletionProposal, *mut GtkSourceCompletionInfo)>,
    pub get_start_iter: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProvider, *mut GtkSourceCompletionContext, *mut GtkSourceCompletionProposal, *mut gtk::GtkTextIter) -> gboolean>,
    pub activate_proposal: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProvider, *mut GtkSourceCompletionProposal, *mut gtk::GtkTextIter) -> gboolean>,
    pub get_interactive_delay: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProvider) -> c_int>,
    pub get_priority: Option<unsafe extern "C" fn(*mut GtkSourceCompletionProvider) -> c_int>,
}

#[repr(C)]
pub struct GtkSourceCompletionWordsClass {
    pub parent_class: gobject::GObjectClass,
}

#[repr(C)]
pub struct GtkSourceCompletionWordsPrivate(c_void);

#[repr(C)]
pub struct GtkSourceEncoding(c_void);

#[repr(C)]
pub struct GtkSourceFileClass {
    pub parent_class: gobject::GObjectClass,
    pub padding: [gpointer; 10],
}

#[repr(C)]
pub struct GtkSourceFileLoaderClass {
    pub parent_class: gobject::GObjectClass,
    pub padding: [gpointer; 10],
}

#[repr(C)]
pub struct GtkSourceFileLoaderPrivate(c_void);

#[repr(C)]
pub struct GtkSourceFilePrivate(c_void);

#[repr(C)]
pub struct GtkSourceFileSaverClass {
    pub parent_class: gobject::GObjectClass,
    pub padding: [gpointer; 10],
}

#[repr(C)]
pub struct GtkSourceFileSaverPrivate(c_void);

#[repr(C)]
pub struct GtkSourceGutterClass {
    pub parent_class: gobject::GObjectClass,
}

#[repr(C)]
pub struct GtkSourceGutterPrivate(c_void);

#[repr(C)]
pub struct GtkSourceGutterRendererClass {
    pub parent_class: gobject::GInitiallyUnownedClass,
    pub begin: Option<unsafe extern "C" fn(*mut GtkSourceGutterRenderer, *mut cairo::cairo_t, *mut gdk::GdkRectangle, *mut gdk::GdkRectangle, *mut gtk::GtkTextIter, *mut gtk::GtkTextIter)>,
    pub draw: Option<unsafe extern "C" fn(*mut GtkSourceGutterRenderer, *mut cairo::cairo_t, *mut gdk::GdkRectangle, *mut gdk::GdkRectangle, *mut gtk::GtkTextIter, *mut gtk::GtkTextIter, GtkSourceGutterRendererState)>,
    pub end: Option<unsafe extern "C" fn(*mut GtkSourceGutterRenderer)>,
    pub change_view: Option<unsafe extern "C" fn(*mut GtkSourceGutterRenderer, *mut gtk::GtkTextView)>,
    pub change_buffer: Option<unsafe extern "C" fn(*mut GtkSourceGutterRenderer, *mut gtk::GtkTextBuffer)>,
    pub query_activatable: Option<unsafe extern "C" fn(*mut GtkSourceGutterRenderer, *mut gtk::GtkTextIter, *mut gdk::GdkRectangle, *mut gdk::GdkEvent) -> gboolean>,
    pub activate: Option<unsafe extern "C" fn(*mut GtkSourceGutterRenderer, *mut gtk::GtkTextIter, *mut gdk::GdkRectangle, *mut gdk::GdkEvent)>,
    pub queue_draw: Option<unsafe extern "C" fn(*mut GtkSourceGutterRenderer)>,
    pub query_tooltip: Option<unsafe extern "C" fn(*mut GtkSourceGutterRenderer, *mut gtk::GtkTextIter, *mut gdk::GdkRectangle, c_int, c_int, *mut gtk::GtkTooltip) -> gboolean>,
    pub query_data: Option<unsafe extern "C" fn(*mut GtkSourceGutterRenderer, *mut gtk::GtkTextIter, *mut gtk::GtkTextIter, GtkSourceGutterRendererState)>,
}

#[repr(C)]
pub struct GtkSourceGutterRendererPixbufClass {
    pub parent_class: GtkSourceGutterRendererClass,
}

#[repr(C)]
pub struct GtkSourceGutterRendererPixbufPrivate(c_void);

#[repr(C)]
pub struct GtkSourceGutterRendererPrivate(c_void);

#[repr(C)]
pub struct GtkSourceGutterRendererTextClass {
    pub parent_class: GtkSourceGutterRendererClass,
}

#[repr(C)]
pub struct GtkSourceGutterRendererTextPrivate(c_void);

#[repr(C)]
pub struct GtkSourceLanguageClass {
    pub parent_class: gobject::GObjectClass,
    pub _gtk_source_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_source_reserved2: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSourceLanguageManagerClass {
    pub parent_class: gobject::GObjectClass,
    pub _gtk_source_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_source_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_source_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_source_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSourceLanguageManagerPrivate(c_void);

#[repr(C)]
pub struct GtkSourceLanguagePrivate(c_void);

#[repr(C)]
pub struct GtkSourceMapClass {
    pub parent_class: GtkSourceViewClass,
    pub padding: [gpointer; 10],
}

#[repr(C)]
pub struct GtkSourceMarkAttributesClass {
    pub parent_class: gobject::GObjectClass,
}

#[repr(C)]
pub struct GtkSourceMarkAttributesPrivate(c_void);

#[repr(C)]
pub struct GtkSourceMarkClass {
    pub parent_class: gtk::GtkTextMarkClass,
    pub _gtk_source_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_source_reserved2: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSourceMarkPrivate(c_void);

#[repr(C)]
pub struct GtkSourcePrintCompositorClass {
    pub parent_class: gobject::GObjectClass,
    pub _gtk_source_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_source_reserved2: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSourcePrintCompositorPrivate(c_void);

#[repr(C)]
pub struct GtkSourceRegionClass {
    pub parent_class: gobject::GObjectClass,
    pub padding: [gpointer; 8],
}

#[repr(C)]
pub struct GtkSourceRegionIter {
    pub dummy1: gpointer,
    pub dummy2: u32,
    pub dummy3: gpointer,
}

#[repr(C)]
pub struct GtkSourceSearchContextClass {
    pub parent_class: gobject::GObjectClass,
    pub padding: [gpointer; 10],
}

#[repr(C)]
pub struct GtkSourceSearchContextPrivate(c_void);

#[repr(C)]
pub struct GtkSourceSearchSettingsClass {
    pub parent_class: gobject::GObjectClass,
    pub padding: [gpointer; 10],
}

#[repr(C)]
pub struct GtkSourceSearchSettingsPrivate(c_void);

#[repr(C)]
pub struct GtkSourceSpaceDrawerClass {
    pub parent_class: gobject::GObjectClass,
    pub padding: [gpointer; 20],
}

#[repr(C)]
pub struct GtkSourceSpaceDrawerPrivate(c_void);

#[repr(C)]
pub struct GtkSourceStyleClass(c_void);

#[repr(C)]
pub struct GtkSourceStyleSchemeChooserButtonClass {
    pub parent: gtk::GtkButtonClass,
}

#[repr(C)]
pub struct GtkSourceStyleSchemeChooserInterface {
    pub base_interface: gobject::GTypeInterface,
    pub get_style_scheme: Option<unsafe extern "C" fn(*mut GtkSourceStyleSchemeChooser) -> *mut GtkSourceStyleScheme>,
    pub set_style_scheme: Option<unsafe extern "C" fn(*mut GtkSourceStyleSchemeChooser, *mut GtkSourceStyleScheme)>,
    pub padding: [gpointer; 12],
}

#[repr(C)]
pub struct GtkSourceStyleSchemeChooserWidgetClass {
    pub parent: gtk::GtkBinClass,
}

#[repr(C)]
pub struct GtkSourceStyleSchemeClass {
    pub base_class: gobject::GObjectClass,
    pub _gtk_source_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_source_reserved2: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSourceStyleSchemeManagerClass {
    pub parent_class: gobject::GObjectClass,
    pub _gtk_source_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_source_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_source_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_source_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSourceStyleSchemeManagerPrivate(c_void);

#[repr(C)]
pub struct GtkSourceStyleSchemePrivate(c_void);

#[repr(C)]
pub struct GtkSourceTagClass {
    pub parent_class: gtk::GtkTextTagClass,
    pub padding: [gpointer; 10],
}

#[repr(C)]
pub struct GtkSourceUndoManagerIface {
    pub parent: gobject::GTypeInterface,
    pub can_undo: Option<unsafe extern "C" fn(*mut GtkSourceUndoManager) -> gboolean>,
    pub can_redo: Option<unsafe extern "C" fn(*mut GtkSourceUndoManager) -> gboolean>,
    pub undo: Option<unsafe extern "C" fn(*mut GtkSourceUndoManager)>,
    pub redo: Option<unsafe extern "C" fn(*mut GtkSourceUndoManager)>,
    pub begin_not_undoable_action: Option<unsafe extern "C" fn(*mut GtkSourceUndoManager)>,
    pub end_not_undoable_action: Option<unsafe extern "C" fn(*mut GtkSourceUndoManager)>,
    pub can_undo_changed: Option<unsafe extern "C" fn(*mut GtkSourceUndoManager)>,
    pub can_redo_changed: Option<unsafe extern "C" fn(*mut GtkSourceUndoManager)>,
}

#[repr(C)]
pub struct GtkSourceViewClass {
    pub parent_class: gtk::GtkTextViewClass,
    pub undo: Option<unsafe extern "C" fn(*mut GtkSourceView)>,
    pub redo: Option<unsafe extern "C" fn(*mut GtkSourceView)>,
    pub line_mark_activated: Option<unsafe extern "C" fn(*mut GtkSourceView, *mut gtk::GtkTextIter, *mut gdk::GdkEvent)>,
    pub show_completion: Option<unsafe extern "C" fn(*mut GtkSourceView)>,
    pub move_lines: Option<unsafe extern "C" fn(*mut GtkSourceView, gboolean, c_int)>,
    pub move_words: Option<unsafe extern "C" fn(*mut GtkSourceView, c_int)>,
}

#[repr(C)]
pub struct GtkSourceViewPrivate(c_void);

// Classes
#[repr(C)]
pub struct GtkSourceBuffer {
    pub parent_instance: gtk::GtkTextBuffer,
    pub priv_: *mut GtkSourceBufferPrivate,
}

#[repr(C)]
pub struct GtkSourceCompletion {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut GtkSourceCompletionPrivate,
}

#[repr(C)]
pub struct GtkSourceCompletionContext {
    pub parent: gobject::GInitiallyUnowned,
    pub priv_: *mut GtkSourceCompletionContextPrivate,
}

#[repr(C)]
pub struct GtkSourceCompletionInfo {
    pub parent: gtk::GtkWindow,
    pub priv_: *mut GtkSourceCompletionInfoPrivate,
}

#[repr(C)]
pub struct GtkSourceCompletionItem {
    pub parent: gobject::GObject,
    pub priv_: *mut GtkSourceCompletionItemPrivate,
}

#[repr(C)]
pub struct GtkSourceCompletionWords {
    pub parent: gobject::GObject,
    pub priv_: *mut GtkSourceCompletionWordsPrivate,
}

#[repr(C)]
pub struct GtkSourceFile {
    pub parent: gobject::GObject,
    pub priv_: *mut GtkSourceFilePrivate,
}

#[repr(C)]
pub struct GtkSourceFileLoader {
    pub parent: gobject::GObject,
    pub priv_: *mut GtkSourceFileLoaderPrivate,
}

#[repr(C)]
pub struct GtkSourceFileSaver {
    pub object: gobject::GObject,
    pub priv_: *mut GtkSourceFileSaverPrivate,
}

#[repr(C)]
pub struct GtkSourceGutter {
    pub parent: gobject::GObject,
    pub priv_: *mut GtkSourceGutterPrivate,
}

#[repr(C)]
pub struct GtkSourceGutterRenderer {
    pub parent: gobject::GInitiallyUnowned,
    pub priv_: *mut GtkSourceGutterRendererPrivate,
}

#[repr(C)]
pub struct GtkSourceGutterRendererPixbuf {
    pub parent: GtkSourceGutterRenderer,
    pub priv_: *mut GtkSourceGutterRendererPixbufPrivate,
}

#[repr(C)]
pub struct GtkSourceGutterRendererText {
    pub parent: GtkSourceGutterRenderer,
    pub priv_: *mut GtkSourceGutterRendererTextPrivate,
}

#[repr(C)]
pub struct GtkSourceLanguage {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut GtkSourceLanguagePrivate,
}

#[repr(C)]
pub struct GtkSourceLanguageManager {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut GtkSourceLanguageManagerPrivate,
}

#[repr(C)]
pub struct GtkSourceMap {
    pub parent_instance: GtkSourceView,
}

#[repr(C)]
pub struct GtkSourceMark {
    pub parent_instance: gtk::GtkTextMark,
    pub priv_: *mut GtkSourceMarkPrivate,
}

#[repr(C)]
pub struct GtkSourceMarkAttributes {
    pub parent: gobject::GObject,
    pub priv_: *mut GtkSourceMarkAttributesPrivate,
}

#[repr(C)]
pub struct GtkSourcePrintCompositor {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut GtkSourcePrintCompositorPrivate,
}

#[repr(C)]
pub struct GtkSourceRegion {
    pub parent_instance: gobject::GObject,
}

#[repr(C)]
pub struct GtkSourceSearchContext {
    pub parent: gobject::GObject,
    pub priv_: *mut GtkSourceSearchContextPrivate,
}

#[repr(C)]
pub struct GtkSourceSearchSettings {
    pub parent: gobject::GObject,
    pub priv_: *mut GtkSourceSearchSettingsPrivate,
}

#[repr(C)]
pub struct GtkSourceSpaceDrawer {
    pub parent: gobject::GObject,
    pub priv_: *mut GtkSourceSpaceDrawerPrivate,
}

#[repr(C)]
pub struct GtkSourceStyle(c_void);

#[repr(C)]
pub struct GtkSourceStyleScheme {
    pub base: gobject::GObject,
    pub priv_: *mut GtkSourceStyleSchemePrivate,
}

#[repr(C)]
pub struct GtkSourceStyleSchemeChooserButton {
    pub parent: gtk::GtkButton,
}

#[repr(C)]
pub struct GtkSourceStyleSchemeChooserWidget {
    pub parent: gtk::GtkBin,
}

#[repr(C)]
pub struct GtkSourceStyleSchemeManager {
    pub parent: gobject::GObject,
    pub priv_: *mut GtkSourceStyleSchemeManagerPrivate,
}

#[repr(C)]
pub struct GtkSourceTag {
    pub parent_instance: gtk::GtkTextTag,
}

#[repr(C)]
pub struct GtkSourceView {
    pub parent: gtk::GtkTextView,
    pub priv_: *mut GtkSourceViewPrivate,
}

// Interfaces
#[repr(C)]
pub struct GtkSourceCompletionProposal(c_void);
#[repr(C)]
pub struct GtkSourceCompletionProvider(c_void);
#[repr(C)]
pub struct GtkSourceStyleSchemeChooser(c_void);
#[repr(C)]
pub struct GtkSourceUndoManager(c_void);

extern "C" {

    //=========================================================================
    // GtkSourceCompletionError
    //=========================================================================
    pub fn gtk_source_completion_error_quark() -> glib::GQuark;

    //=========================================================================
    // GtkSourceFileLoaderError
    //=========================================================================
    pub fn gtk_source_file_loader_error_quark() -> glib::GQuark;

    //=========================================================================
    // GtkSourceFileSaverError
    //=========================================================================
    pub fn gtk_source_file_saver_error_quark() -> glib::GQuark;

    //=========================================================================
    // GtkSourceEncoding
    //=========================================================================
    pub fn gtk_source_encoding_get_type() -> GType;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_encoding_copy(enc: *const GtkSourceEncoding) -> *mut GtkSourceEncoding;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_encoding_free(enc: *mut GtkSourceEncoding);
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_encoding_get_charset(enc: *const GtkSourceEncoding) -> *const c_char;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_encoding_get_name(enc: *const GtkSourceEncoding) -> *const c_char;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_encoding_to_string(enc: *const GtkSourceEncoding) -> *mut c_char;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_encoding_get_all() -> *mut glib::GSList;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_encoding_get_current() -> *const GtkSourceEncoding;
    #[cfg(feature = "v3_18")]
    pub fn gtk_source_encoding_get_default_candidates() -> *mut glib::GSList;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_encoding_get_from_charset(charset: *const c_char) -> *const GtkSourceEncoding;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_encoding_get_utf8() -> *const GtkSourceEncoding;

    //=========================================================================
    // GtkSourceRegionIter
    //=========================================================================
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_region_iter_get_subregion(iter: *mut GtkSourceRegionIter, start: *mut gtk::GtkTextIter, end: *mut gtk::GtkTextIter) -> gboolean;
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_region_iter_is_end(iter: *mut GtkSourceRegionIter) -> gboolean;
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_region_iter_next(iter: *mut GtkSourceRegionIter) -> gboolean;

    //=========================================================================
    // GtkSourceBuffer
    //=========================================================================
    pub fn gtk_source_buffer_get_type() -> GType;
    pub fn gtk_source_buffer_new(table: *mut gtk::GtkTextTagTable) -> *mut GtkSourceBuffer;
    pub fn gtk_source_buffer_new_with_language(language: *mut GtkSourceLanguage) -> *mut GtkSourceBuffer;
    pub fn gtk_source_buffer_backward_iter_to_source_mark(buffer: *mut GtkSourceBuffer, iter: *mut gtk::GtkTextIter, category: *const c_char) -> gboolean;
    pub fn gtk_source_buffer_begin_not_undoable_action(buffer: *mut GtkSourceBuffer);
    pub fn gtk_source_buffer_can_redo(buffer: *mut GtkSourceBuffer) -> gboolean;
    pub fn gtk_source_buffer_can_undo(buffer: *mut GtkSourceBuffer) -> gboolean;
    #[cfg(feature = "v3_12")]
    pub fn gtk_source_buffer_change_case(buffer: *mut GtkSourceBuffer, case_type: GtkSourceChangeCaseType, start: *mut gtk::GtkTextIter, end: *mut gtk::GtkTextIter);
    pub fn gtk_source_buffer_create_source_mark(buffer: *mut GtkSourceBuffer, name: *const c_char, category: *const c_char, where_: *const gtk::GtkTextIter) -> *mut GtkSourceMark;
    #[cfg(feature = "v3_20")]
    pub fn gtk_source_buffer_create_source_tag(buffer: *mut GtkSourceBuffer, tag_name: *const c_char, first_property_name: *const c_char, ...) -> *mut gtk::GtkTextTag;
    pub fn gtk_source_buffer_end_not_undoable_action(buffer: *mut GtkSourceBuffer);
    pub fn gtk_source_buffer_ensure_highlight(buffer: *mut GtkSourceBuffer, start: *const gtk::GtkTextIter, end: *const gtk::GtkTextIter);
    pub fn gtk_source_buffer_forward_iter_to_source_mark(buffer: *mut GtkSourceBuffer, iter: *mut gtk::GtkTextIter, category: *const c_char) -> gboolean;
    pub fn gtk_source_buffer_get_context_classes_at_iter(buffer: *mut GtkSourceBuffer, iter: *const gtk::GtkTextIter) -> *mut *mut c_char;
    pub fn gtk_source_buffer_get_highlight_matching_brackets(buffer: *mut GtkSourceBuffer) -> gboolean;
    pub fn gtk_source_buffer_get_highlight_syntax(buffer: *mut GtkSourceBuffer) -> gboolean;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_buffer_get_implicit_trailing_newline(buffer: *mut GtkSourceBuffer) -> gboolean;
    pub fn gtk_source_buffer_get_language(buffer: *mut GtkSourceBuffer) -> *mut GtkSourceLanguage;
    pub fn gtk_source_buffer_get_max_undo_levels(buffer: *mut GtkSourceBuffer) -> c_int;
    pub fn gtk_source_buffer_get_source_marks_at_iter(buffer: *mut GtkSourceBuffer, iter: *mut gtk::GtkTextIter, category: *const c_char) -> *mut glib::GSList;
    pub fn gtk_source_buffer_get_source_marks_at_line(buffer: *mut GtkSourceBuffer, line: c_int, category: *const c_char) -> *mut glib::GSList;
    pub fn gtk_source_buffer_get_style_scheme(buffer: *mut GtkSourceBuffer) -> *mut GtkSourceStyleScheme;
    pub fn gtk_source_buffer_get_undo_manager(buffer: *mut GtkSourceBuffer) -> *mut GtkSourceUndoManager;
    pub fn gtk_source_buffer_iter_backward_to_context_class_toggle(buffer: *mut GtkSourceBuffer, iter: *mut gtk::GtkTextIter, context_class: *const c_char) -> gboolean;
    pub fn gtk_source_buffer_iter_forward_to_context_class_toggle(buffer: *mut GtkSourceBuffer, iter: *mut gtk::GtkTextIter, context_class: *const c_char) -> gboolean;
    pub fn gtk_source_buffer_iter_has_context_class(buffer: *mut GtkSourceBuffer, iter: *const gtk::GtkTextIter, context_class: *const c_char) -> gboolean;
    #[cfg(feature = "v3_16")]
    pub fn gtk_source_buffer_join_lines(buffer: *mut GtkSourceBuffer, start: *mut gtk::GtkTextIter, end: *mut gtk::GtkTextIter);
    pub fn gtk_source_buffer_redo(buffer: *mut GtkSourceBuffer);
    pub fn gtk_source_buffer_remove_source_marks(buffer: *mut GtkSourceBuffer, start: *const gtk::GtkTextIter, end: *const gtk::GtkTextIter, category: *const c_char);
    pub fn gtk_source_buffer_set_highlight_matching_brackets(buffer: *mut GtkSourceBuffer, highlight: gboolean);
    pub fn gtk_source_buffer_set_highlight_syntax(buffer: *mut GtkSourceBuffer, highlight: gboolean);
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_buffer_set_implicit_trailing_newline(buffer: *mut GtkSourceBuffer, implicit_trailing_newline: gboolean);
    pub fn gtk_source_buffer_set_language(buffer: *mut GtkSourceBuffer, language: *mut GtkSourceLanguage);
    pub fn gtk_source_buffer_set_max_undo_levels(buffer: *mut GtkSourceBuffer, max_undo_levels: c_int);
    pub fn gtk_source_buffer_set_style_scheme(buffer: *mut GtkSourceBuffer, scheme: *mut GtkSourceStyleScheme);
    pub fn gtk_source_buffer_set_undo_manager(buffer: *mut GtkSourceBuffer, manager: *mut GtkSourceUndoManager);
    #[cfg(feature = "v3_18")]
    pub fn gtk_source_buffer_sort_lines(buffer: *mut GtkSourceBuffer, start: *mut gtk::GtkTextIter, end: *mut gtk::GtkTextIter, flags: GtkSourceSortFlags, column: c_int);
    pub fn gtk_source_buffer_undo(buffer: *mut GtkSourceBuffer);

    //=========================================================================
    // GtkSourceCompletion
    //=========================================================================
    pub fn gtk_source_completion_get_type() -> GType;
    pub fn gtk_source_completion_add_provider(completion: *mut GtkSourceCompletion, provider: *mut GtkSourceCompletionProvider, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_source_completion_block_interactive(completion: *mut GtkSourceCompletion);
    pub fn gtk_source_completion_create_context(completion: *mut GtkSourceCompletion, position: *mut gtk::GtkTextIter) -> *mut GtkSourceCompletionContext;
    pub fn gtk_source_completion_get_info_window(completion: *mut GtkSourceCompletion) -> *mut GtkSourceCompletionInfo;
    pub fn gtk_source_completion_get_providers(completion: *mut GtkSourceCompletion) -> *mut glib::GList;
    pub fn gtk_source_completion_get_view(completion: *mut GtkSourceCompletion) -> *mut GtkSourceView;
    pub fn gtk_source_completion_hide(completion: *mut GtkSourceCompletion);
    pub fn gtk_source_completion_move_window(completion: *mut GtkSourceCompletion, iter: *mut gtk::GtkTextIter);
    pub fn gtk_source_completion_remove_provider(completion: *mut GtkSourceCompletion, provider: *mut GtkSourceCompletionProvider, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_source_completion_show(completion: *mut GtkSourceCompletion, providers: *mut glib::GList, context: *mut GtkSourceCompletionContext) -> gboolean;
    pub fn gtk_source_completion_unblock_interactive(completion: *mut GtkSourceCompletion);

    //=========================================================================
    // GtkSourceCompletionContext
    //=========================================================================
    pub fn gtk_source_completion_context_get_type() -> GType;
    pub fn gtk_source_completion_context_add_proposals(context: *mut GtkSourceCompletionContext, provider: *mut GtkSourceCompletionProvider, proposals: *mut glib::GList, finished: gboolean);
    pub fn gtk_source_completion_context_get_activation(context: *mut GtkSourceCompletionContext) -> GtkSourceCompletionActivation;
    pub fn gtk_source_completion_context_get_iter(context: *mut GtkSourceCompletionContext, iter: *mut gtk::GtkTextIter) -> gboolean;

    //=========================================================================
    // GtkSourceCompletionInfo
    //=========================================================================
    pub fn gtk_source_completion_info_get_type() -> GType;
    pub fn gtk_source_completion_info_new() -> *mut GtkSourceCompletionInfo;
    pub fn gtk_source_completion_info_get_widget(info: *mut GtkSourceCompletionInfo) -> *mut gtk::GtkWidget;
    pub fn gtk_source_completion_info_move_to_iter(info: *mut GtkSourceCompletionInfo, view: *mut gtk::GtkTextView, iter: *mut gtk::GtkTextIter);
    pub fn gtk_source_completion_info_set_widget(info: *mut GtkSourceCompletionInfo, widget: *mut gtk::GtkWidget);

    //=========================================================================
    // GtkSourceCompletionItem
    //=========================================================================
    pub fn gtk_source_completion_item_get_type() -> GType;
    pub fn gtk_source_completion_item_new(label: *const c_char, text: *const c_char, icon: *mut gdk_pixbuf::GdkPixbuf, info: *const c_char) -> *mut GtkSourceCompletionItem;
    pub fn gtk_source_completion_item_new_from_stock(label: *const c_char, text: *const c_char, stock: *const c_char, info: *const c_char) -> *mut GtkSourceCompletionItem;
    pub fn gtk_source_completion_item_new_with_markup(markup: *const c_char, text: *const c_char, icon: *mut gdk_pixbuf::GdkPixbuf, info: *const c_char) -> *mut GtkSourceCompletionItem;
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_completion_item_new2() -> *mut GtkSourceCompletionItem;
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_completion_item_set_gicon(item: *mut GtkSourceCompletionItem, gicon: *mut gio::GIcon);
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_completion_item_set_icon(item: *mut GtkSourceCompletionItem, icon: *mut gdk_pixbuf::GdkPixbuf);
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_completion_item_set_icon_name(item: *mut GtkSourceCompletionItem, icon_name: *const c_char);
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_completion_item_set_info(item: *mut GtkSourceCompletionItem, info: *const c_char);
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_completion_item_set_label(item: *mut GtkSourceCompletionItem, label: *const c_char);
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_completion_item_set_markup(item: *mut GtkSourceCompletionItem, markup: *const c_char);
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_completion_item_set_text(item: *mut GtkSourceCompletionItem, text: *const c_char);

    //=========================================================================
    // GtkSourceCompletionWords
    //=========================================================================
    pub fn gtk_source_completion_words_get_type() -> GType;
    pub fn gtk_source_completion_words_new(name: *const c_char, icon: *mut gdk_pixbuf::GdkPixbuf) -> *mut GtkSourceCompletionWords;
    pub fn gtk_source_completion_words_register(words: *mut GtkSourceCompletionWords, buffer: *mut gtk::GtkTextBuffer);
    pub fn gtk_source_completion_words_unregister(words: *mut GtkSourceCompletionWords, buffer: *mut gtk::GtkTextBuffer);

    //=========================================================================
    // GtkSourceFile
    //=========================================================================
    pub fn gtk_source_file_get_type() -> GType;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_new() -> *mut GtkSourceFile;
    #[cfg(feature = "v3_18")]
    pub fn gtk_source_file_check_file_on_disk(file: *mut GtkSourceFile);
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_get_compression_type(file: *mut GtkSourceFile) -> GtkSourceCompressionType;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_get_encoding(file: *mut GtkSourceFile) -> *const GtkSourceEncoding;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_get_location(file: *mut GtkSourceFile) -> *mut gio::GFile;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_get_newline_type(file: *mut GtkSourceFile) -> GtkSourceNewlineType;
    #[cfg(feature = "v3_18")]
    pub fn gtk_source_file_is_deleted(file: *mut GtkSourceFile) -> gboolean;
    #[cfg(feature = "v3_18")]
    pub fn gtk_source_file_is_externally_modified(file: *mut GtkSourceFile) -> gboolean;
    #[cfg(feature = "v3_18")]
    pub fn gtk_source_file_is_local(file: *mut GtkSourceFile) -> gboolean;
    #[cfg(feature = "v3_18")]
    pub fn gtk_source_file_is_readonly(file: *mut GtkSourceFile) -> gboolean;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_set_location(file: *mut GtkSourceFile, location: *mut gio::GFile);
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_set_mount_operation_factory(file: *mut GtkSourceFile, callback: GtkSourceMountOperationFactory, user_data: gpointer, notify: glib::GDestroyNotify);

    //=========================================================================
    // GtkSourceFileLoader
    //=========================================================================
    pub fn gtk_source_file_loader_get_type() -> GType;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_loader_new(buffer: *mut GtkSourceBuffer, file: *mut GtkSourceFile) -> *mut GtkSourceFileLoader;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_loader_new_from_stream(buffer: *mut GtkSourceBuffer, file: *mut GtkSourceFile, stream: *mut gio::GInputStream) -> *mut GtkSourceFileLoader;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_loader_get_buffer(loader: *mut GtkSourceFileLoader) -> *mut GtkSourceBuffer;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_loader_get_compression_type(loader: *mut GtkSourceFileLoader) -> GtkSourceCompressionType;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_loader_get_encoding(loader: *mut GtkSourceFileLoader) -> *const GtkSourceEncoding;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_loader_get_file(loader: *mut GtkSourceFileLoader) -> *mut GtkSourceFile;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_loader_get_input_stream(loader: *mut GtkSourceFileLoader) -> *mut gio::GInputStream;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_loader_get_location(loader: *mut GtkSourceFileLoader) -> *mut gio::GFile;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_loader_get_newline_type(loader: *mut GtkSourceFileLoader) -> GtkSourceNewlineType;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_loader_load_async(loader: *mut GtkSourceFileLoader, io_priority: c_int, cancellable: *mut gio::GCancellable, progress_callback: gio::GFileProgressCallback, progress_callback_data: gpointer, progress_callback_notify: glib::GDestroyNotify, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_loader_load_finish(loader: *mut GtkSourceFileLoader, result: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_loader_set_candidate_encodings(loader: *mut GtkSourceFileLoader, candidate_encodings: *mut glib::GSList);

    //=========================================================================
    // GtkSourceFileSaver
    //=========================================================================
    pub fn gtk_source_file_saver_get_type() -> GType;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_saver_new(buffer: *mut GtkSourceBuffer, file: *mut GtkSourceFile) -> *mut GtkSourceFileSaver;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_saver_new_with_target(buffer: *mut GtkSourceBuffer, file: *mut GtkSourceFile, target_location: *mut gio::GFile) -> *mut GtkSourceFileSaver;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_saver_get_buffer(saver: *mut GtkSourceFileSaver) -> *mut GtkSourceBuffer;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_saver_get_compression_type(saver: *mut GtkSourceFileSaver) -> GtkSourceCompressionType;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_saver_get_encoding(saver: *mut GtkSourceFileSaver) -> *const GtkSourceEncoding;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_saver_get_file(saver: *mut GtkSourceFileSaver) -> *mut GtkSourceFile;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_saver_get_flags(saver: *mut GtkSourceFileSaver) -> GtkSourceFileSaverFlags;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_saver_get_location(saver: *mut GtkSourceFileSaver) -> *mut gio::GFile;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_saver_get_newline_type(saver: *mut GtkSourceFileSaver) -> GtkSourceNewlineType;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_saver_save_async(saver: *mut GtkSourceFileSaver, io_priority: c_int, cancellable: *mut gio::GCancellable, progress_callback: gio::GFileProgressCallback, progress_callback_data: gpointer, progress_callback_notify: glib::GDestroyNotify, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_saver_save_finish(saver: *mut GtkSourceFileSaver, result: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_saver_set_compression_type(saver: *mut GtkSourceFileSaver, compression_type: GtkSourceCompressionType);
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_saver_set_encoding(saver: *mut GtkSourceFileSaver, encoding: *const GtkSourceEncoding);
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_saver_set_flags(saver: *mut GtkSourceFileSaver, flags: GtkSourceFileSaverFlags);
    #[cfg(feature = "v3_14")]
    pub fn gtk_source_file_saver_set_newline_type(saver: *mut GtkSourceFileSaver, newline_type: GtkSourceNewlineType);

    //=========================================================================
    // GtkSourceGutter
    //=========================================================================
    pub fn gtk_source_gutter_get_type() -> GType;
    pub fn gtk_source_gutter_get_padding(gutter: *mut GtkSourceGutter, xpad: *mut c_int, ypad: *mut c_int);
    pub fn gtk_source_gutter_get_renderer_at_pos(gutter: *mut GtkSourceGutter, x: c_int, y: c_int) -> *mut GtkSourceGutterRenderer;
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_gutter_get_view(gutter: *mut GtkSourceGutter) -> *mut GtkSourceView;
    pub fn gtk_source_gutter_get_window(gutter: *mut GtkSourceGutter) -> *mut gdk::GdkWindow;
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_gutter_get_window_type(gutter: *mut GtkSourceGutter) -> gtk::GtkTextWindowType;
    pub fn gtk_source_gutter_insert(gutter: *mut GtkSourceGutter, renderer: *mut GtkSourceGutterRenderer, position: c_int) -> gboolean;
    pub fn gtk_source_gutter_queue_draw(gutter: *mut GtkSourceGutter);
    pub fn gtk_source_gutter_remove(gutter: *mut GtkSourceGutter, renderer: *mut GtkSourceGutterRenderer);
    pub fn gtk_source_gutter_reorder(gutter: *mut GtkSourceGutter, renderer: *mut GtkSourceGutterRenderer, position: c_int);
    pub fn gtk_source_gutter_set_padding(gutter: *mut GtkSourceGutter, xpad: c_int, ypad: c_int);

    //=========================================================================
    // GtkSourceGutterRenderer
    //=========================================================================
    pub fn gtk_source_gutter_renderer_get_type() -> GType;
    pub fn gtk_source_gutter_renderer_activate(renderer: *mut GtkSourceGutterRenderer, iter: *mut gtk::GtkTextIter, area: *mut gdk::GdkRectangle, event: *mut gdk::GdkEvent);
    pub fn gtk_source_gutter_renderer_begin(renderer: *mut GtkSourceGutterRenderer, cr: *mut cairo::cairo_t, background_area: *mut gdk::GdkRectangle, cell_area: *mut gdk::GdkRectangle, start: *mut gtk::GtkTextIter, end: *mut gtk::GtkTextIter);
    pub fn gtk_source_gutter_renderer_draw(renderer: *mut GtkSourceGutterRenderer, cr: *mut cairo::cairo_t, background_area: *mut gdk::GdkRectangle, cell_area: *mut gdk::GdkRectangle, start: *mut gtk::GtkTextIter, end: *mut gtk::GtkTextIter, state: GtkSourceGutterRendererState);
    pub fn gtk_source_gutter_renderer_end(renderer: *mut GtkSourceGutterRenderer);
    pub fn gtk_source_gutter_renderer_get_alignment(renderer: *mut GtkSourceGutterRenderer, xalign: *mut c_float, yalign: *mut c_float);
    pub fn gtk_source_gutter_renderer_get_alignment_mode(renderer: *mut GtkSourceGutterRenderer) -> GtkSourceGutterRendererAlignmentMode;
    pub fn gtk_source_gutter_renderer_get_background(renderer: *mut GtkSourceGutterRenderer, color: *mut gdk::GdkRGBA) -> gboolean;
    pub fn gtk_source_gutter_renderer_get_padding(renderer: *mut GtkSourceGutterRenderer, xpad: *mut c_int, ypad: *mut c_int);
    pub fn gtk_source_gutter_renderer_get_size(renderer: *mut GtkSourceGutterRenderer) -> c_int;
    pub fn gtk_source_gutter_renderer_get_view(renderer: *mut GtkSourceGutterRenderer) -> *mut gtk::GtkTextView;
    pub fn gtk_source_gutter_renderer_get_visible(renderer: *mut GtkSourceGutterRenderer) -> gboolean;
    pub fn gtk_source_gutter_renderer_get_window_type(renderer: *mut GtkSourceGutterRenderer) -> gtk::GtkTextWindowType;
    pub fn gtk_source_gutter_renderer_query_activatable(renderer: *mut GtkSourceGutterRenderer, iter: *mut gtk::GtkTextIter, area: *mut gdk::GdkRectangle, event: *mut gdk::GdkEvent) -> gboolean;
    pub fn gtk_source_gutter_renderer_query_data(renderer: *mut GtkSourceGutterRenderer, start: *mut gtk::GtkTextIter, end: *mut gtk::GtkTextIter, state: GtkSourceGutterRendererState);
    pub fn gtk_source_gutter_renderer_query_tooltip(renderer: *mut GtkSourceGutterRenderer, iter: *mut gtk::GtkTextIter, area: *mut gdk::GdkRectangle, x: c_int, y: c_int, tooltip: *mut gtk::GtkTooltip) -> gboolean;
    pub fn gtk_source_gutter_renderer_queue_draw(renderer: *mut GtkSourceGutterRenderer);
    pub fn gtk_source_gutter_renderer_set_alignment(renderer: *mut GtkSourceGutterRenderer, xalign: c_float, yalign: c_float);
    pub fn gtk_source_gutter_renderer_set_alignment_mode(renderer: *mut GtkSourceGutterRenderer, mode: GtkSourceGutterRendererAlignmentMode);
    pub fn gtk_source_gutter_renderer_set_background(renderer: *mut GtkSourceGutterRenderer, color: *const gdk::GdkRGBA);
    pub fn gtk_source_gutter_renderer_set_padding(renderer: *mut GtkSourceGutterRenderer, xpad: c_int, ypad: c_int);
    pub fn gtk_source_gutter_renderer_set_size(renderer: *mut GtkSourceGutterRenderer, size: c_int);
    pub fn gtk_source_gutter_renderer_set_visible(renderer: *mut GtkSourceGutterRenderer, visible: gboolean);

    //=========================================================================
    // GtkSourceGutterRendererPixbuf
    //=========================================================================
    pub fn gtk_source_gutter_renderer_pixbuf_get_type() -> GType;
    pub fn gtk_source_gutter_renderer_pixbuf_new() -> *mut GtkSourceGutterRenderer;
    pub fn gtk_source_gutter_renderer_pixbuf_get_gicon(renderer: *mut GtkSourceGutterRendererPixbuf) -> *mut gio::GIcon;
    pub fn gtk_source_gutter_renderer_pixbuf_get_icon_name(renderer: *mut GtkSourceGutterRendererPixbuf) -> *const c_char;
    pub fn gtk_source_gutter_renderer_pixbuf_get_pixbuf(renderer: *mut GtkSourceGutterRendererPixbuf) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_source_gutter_renderer_pixbuf_get_stock_id(renderer: *mut GtkSourceGutterRendererPixbuf) -> *const c_char;
    pub fn gtk_source_gutter_renderer_pixbuf_set_gicon(renderer: *mut GtkSourceGutterRendererPixbuf, icon: *mut gio::GIcon);
    pub fn gtk_source_gutter_renderer_pixbuf_set_icon_name(renderer: *mut GtkSourceGutterRendererPixbuf, icon_name: *const c_char);
    pub fn gtk_source_gutter_renderer_pixbuf_set_pixbuf(renderer: *mut GtkSourceGutterRendererPixbuf, pixbuf: *mut gdk_pixbuf::GdkPixbuf);
    pub fn gtk_source_gutter_renderer_pixbuf_set_stock_id(renderer: *mut GtkSourceGutterRendererPixbuf, stock_id: *const c_char);

    //=========================================================================
    // GtkSourceGutterRendererText
    //=========================================================================
    pub fn gtk_source_gutter_renderer_text_get_type() -> GType;
    pub fn gtk_source_gutter_renderer_text_new() -> *mut GtkSourceGutterRenderer;
    pub fn gtk_source_gutter_renderer_text_measure(renderer: *mut GtkSourceGutterRendererText, text: *const c_char, width: *mut c_int, height: *mut c_int);
    pub fn gtk_source_gutter_renderer_text_measure_markup(renderer: *mut GtkSourceGutterRendererText, markup: *const c_char, width: *mut c_int, height: *mut c_int);
    pub fn gtk_source_gutter_renderer_text_set_markup(renderer: *mut GtkSourceGutterRendererText, markup: *const c_char, length: c_int);
    pub fn gtk_source_gutter_renderer_text_set_text(renderer: *mut GtkSourceGutterRendererText, text: *const c_char, length: c_int);

    //=========================================================================
    // GtkSourceLanguage
    //=========================================================================
    pub fn gtk_source_language_get_type() -> GType;
    pub fn gtk_source_language_get_globs(language: *mut GtkSourceLanguage) -> *mut *mut c_char;
    pub fn gtk_source_language_get_hidden(language: *mut GtkSourceLanguage) -> gboolean;
    pub fn gtk_source_language_get_id(language: *mut GtkSourceLanguage) -> *const c_char;
    pub fn gtk_source_language_get_metadata(language: *mut GtkSourceLanguage, name: *const c_char) -> *const c_char;
    pub fn gtk_source_language_get_mime_types(language: *mut GtkSourceLanguage) -> *mut *mut c_char;
    pub fn gtk_source_language_get_name(language: *mut GtkSourceLanguage) -> *const c_char;
    pub fn gtk_source_language_get_section(language: *mut GtkSourceLanguage) -> *const c_char;
    pub fn gtk_source_language_get_style_fallback(language: *mut GtkSourceLanguage, style_id: *const c_char) -> *const c_char;
    pub fn gtk_source_language_get_style_ids(language: *mut GtkSourceLanguage) -> *mut *mut c_char;
    pub fn gtk_source_language_get_style_name(language: *mut GtkSourceLanguage, style_id: *const c_char) -> *const c_char;

    //=========================================================================
    // GtkSourceLanguageManager
    //=========================================================================
    pub fn gtk_source_language_manager_get_type() -> GType;
    pub fn gtk_source_language_manager_new() -> *mut GtkSourceLanguageManager;
    pub fn gtk_source_language_manager_get_default() -> *mut GtkSourceLanguageManager;
    pub fn gtk_source_language_manager_get_language(lm: *mut GtkSourceLanguageManager, id: *const c_char) -> *mut GtkSourceLanguage;
    pub fn gtk_source_language_manager_get_language_ids(lm: *mut GtkSourceLanguageManager) -> *mut *mut c_char;
    pub fn gtk_source_language_manager_get_search_path(lm: *mut GtkSourceLanguageManager) -> *mut *mut c_char;
    pub fn gtk_source_language_manager_guess_language(lm: *mut GtkSourceLanguageManager, filename: *const c_char, content_type: *const c_char) -> *mut GtkSourceLanguage;
    pub fn gtk_source_language_manager_set_search_path(lm: *mut GtkSourceLanguageManager, dirs: *mut *mut c_char);

    //=========================================================================
    // GtkSourceMap
    //=========================================================================
    pub fn gtk_source_map_get_type() -> GType;
    #[cfg(feature = "v3_18")]
    pub fn gtk_source_map_new() -> *mut gtk::GtkWidget;
    #[cfg(feature = "v3_18")]
    pub fn gtk_source_map_get_view(map: *mut GtkSourceMap) -> *mut GtkSourceView;
    #[cfg(feature = "v3_18")]
    pub fn gtk_source_map_set_view(map: *mut GtkSourceMap, view: *mut GtkSourceView);

    //=========================================================================
    // GtkSourceMark
    //=========================================================================
    pub fn gtk_source_mark_get_type() -> GType;
    pub fn gtk_source_mark_new(name: *const c_char, category: *const c_char) -> *mut GtkSourceMark;
    pub fn gtk_source_mark_get_category(mark: *mut GtkSourceMark) -> *const c_char;
    pub fn gtk_source_mark_next(mark: *mut GtkSourceMark, category: *const c_char) -> *mut GtkSourceMark;
    pub fn gtk_source_mark_prev(mark: *mut GtkSourceMark, category: *const c_char) -> *mut GtkSourceMark;

    //=========================================================================
    // GtkSourceMarkAttributes
    //=========================================================================
    pub fn gtk_source_mark_attributes_get_type() -> GType;
    pub fn gtk_source_mark_attributes_new() -> *mut GtkSourceMarkAttributes;
    pub fn gtk_source_mark_attributes_get_background(attributes: *mut GtkSourceMarkAttributes, background: *mut gdk::GdkRGBA) -> gboolean;
    pub fn gtk_source_mark_attributes_get_gicon(attributes: *mut GtkSourceMarkAttributes) -> *mut gio::GIcon;
    pub fn gtk_source_mark_attributes_get_icon_name(attributes: *mut GtkSourceMarkAttributes) -> *const c_char;
    pub fn gtk_source_mark_attributes_get_pixbuf(attributes: *mut GtkSourceMarkAttributes) -> *const gdk_pixbuf::GdkPixbuf;
    pub fn gtk_source_mark_attributes_get_stock_id(attributes: *mut GtkSourceMarkAttributes) -> *const c_char;
    pub fn gtk_source_mark_attributes_get_tooltip_markup(attributes: *mut GtkSourceMarkAttributes, mark: *mut GtkSourceMark) -> *mut c_char;
    pub fn gtk_source_mark_attributes_get_tooltip_text(attributes: *mut GtkSourceMarkAttributes, mark: *mut GtkSourceMark) -> *mut c_char;
    pub fn gtk_source_mark_attributes_render_icon(attributes: *mut GtkSourceMarkAttributes, widget: *mut gtk::GtkWidget, size: c_int) -> *const gdk_pixbuf::GdkPixbuf;
    pub fn gtk_source_mark_attributes_set_background(attributes: *mut GtkSourceMarkAttributes, background: *const gdk::GdkRGBA);
    pub fn gtk_source_mark_attributes_set_gicon(attributes: *mut GtkSourceMarkAttributes, gicon: *mut gio::GIcon);
    pub fn gtk_source_mark_attributes_set_icon_name(attributes: *mut GtkSourceMarkAttributes, icon_name: *const c_char);
    pub fn gtk_source_mark_attributes_set_pixbuf(attributes: *mut GtkSourceMarkAttributes, pixbuf: *const gdk_pixbuf::GdkPixbuf);
    pub fn gtk_source_mark_attributes_set_stock_id(attributes: *mut GtkSourceMarkAttributes, stock_id: *const c_char);

    //=========================================================================
    // GtkSourcePrintCompositor
    //=========================================================================
    pub fn gtk_source_print_compositor_get_type() -> GType;
    pub fn gtk_source_print_compositor_new(buffer: *mut GtkSourceBuffer) -> *mut GtkSourcePrintCompositor;
    pub fn gtk_source_print_compositor_new_from_view(view: *mut GtkSourceView) -> *mut GtkSourcePrintCompositor;
    pub fn gtk_source_print_compositor_draw_page(compositor: *mut GtkSourcePrintCompositor, context: *mut gtk::GtkPrintContext, page_nr: c_int);
    pub fn gtk_source_print_compositor_get_body_font_name(compositor: *mut GtkSourcePrintCompositor) -> *mut c_char;
    pub fn gtk_source_print_compositor_get_bottom_margin(compositor: *mut GtkSourcePrintCompositor, unit: gtk::GtkUnit) -> c_double;
    pub fn gtk_source_print_compositor_get_buffer(compositor: *mut GtkSourcePrintCompositor) -> *mut GtkSourceBuffer;
    pub fn gtk_source_print_compositor_get_footer_font_name(compositor: *mut GtkSourcePrintCompositor) -> *mut c_char;
    pub fn gtk_source_print_compositor_get_header_font_name(compositor: *mut GtkSourcePrintCompositor) -> *mut c_char;
    pub fn gtk_source_print_compositor_get_highlight_syntax(compositor: *mut GtkSourcePrintCompositor) -> gboolean;
    pub fn gtk_source_print_compositor_get_left_margin(compositor: *mut GtkSourcePrintCompositor, unit: gtk::GtkUnit) -> c_double;
    pub fn gtk_source_print_compositor_get_line_numbers_font_name(compositor: *mut GtkSourcePrintCompositor) -> *mut c_char;
    pub fn gtk_source_print_compositor_get_n_pages(compositor: *mut GtkSourcePrintCompositor) -> c_int;
    pub fn gtk_source_print_compositor_get_pagination_progress(compositor: *mut GtkSourcePrintCompositor) -> c_double;
    pub fn gtk_source_print_compositor_get_print_footer(compositor: *mut GtkSourcePrintCompositor) -> gboolean;
    pub fn gtk_source_print_compositor_get_print_header(compositor: *mut GtkSourcePrintCompositor) -> gboolean;
    pub fn gtk_source_print_compositor_get_print_line_numbers(compositor: *mut GtkSourcePrintCompositor) -> c_uint;
    pub fn gtk_source_print_compositor_get_right_margin(compositor: *mut GtkSourcePrintCompositor, unit: gtk::GtkUnit) -> c_double;
    pub fn gtk_source_print_compositor_get_tab_width(compositor: *mut GtkSourcePrintCompositor) -> c_uint;
    pub fn gtk_source_print_compositor_get_top_margin(compositor: *mut GtkSourcePrintCompositor, unit: gtk::GtkUnit) -> c_double;
    pub fn gtk_source_print_compositor_get_wrap_mode(compositor: *mut GtkSourcePrintCompositor) -> gtk::GtkWrapMode;
    pub fn gtk_source_print_compositor_paginate(compositor: *mut GtkSourcePrintCompositor, context: *mut gtk::GtkPrintContext) -> gboolean;
    pub fn gtk_source_print_compositor_set_body_font_name(compositor: *mut GtkSourcePrintCompositor, font_name: *const c_char);
    pub fn gtk_source_print_compositor_set_bottom_margin(compositor: *mut GtkSourcePrintCompositor, margin: c_double, unit: gtk::GtkUnit);
    pub fn gtk_source_print_compositor_set_footer_font_name(compositor: *mut GtkSourcePrintCompositor, font_name: *const c_char);
    pub fn gtk_source_print_compositor_set_footer_format(compositor: *mut GtkSourcePrintCompositor, separator: gboolean, left: *const c_char, center: *const c_char, right: *const c_char);
    pub fn gtk_source_print_compositor_set_header_font_name(compositor: *mut GtkSourcePrintCompositor, font_name: *const c_char);
    pub fn gtk_source_print_compositor_set_header_format(compositor: *mut GtkSourcePrintCompositor, separator: gboolean, left: *const c_char, center: *const c_char, right: *const c_char);
    pub fn gtk_source_print_compositor_set_highlight_syntax(compositor: *mut GtkSourcePrintCompositor, highlight: gboolean);
    pub fn gtk_source_print_compositor_set_left_margin(compositor: *mut GtkSourcePrintCompositor, margin: c_double, unit: gtk::GtkUnit);
    pub fn gtk_source_print_compositor_set_line_numbers_font_name(compositor: *mut GtkSourcePrintCompositor, font_name: *const c_char);
    pub fn gtk_source_print_compositor_set_print_footer(compositor: *mut GtkSourcePrintCompositor, print: gboolean);
    pub fn gtk_source_print_compositor_set_print_header(compositor: *mut GtkSourcePrintCompositor, print: gboolean);
    pub fn gtk_source_print_compositor_set_print_line_numbers(compositor: *mut GtkSourcePrintCompositor, interval: c_uint);
    pub fn gtk_source_print_compositor_set_right_margin(compositor: *mut GtkSourcePrintCompositor, margin: c_double, unit: gtk::GtkUnit);
    pub fn gtk_source_print_compositor_set_tab_width(compositor: *mut GtkSourcePrintCompositor, width: c_uint);
    pub fn gtk_source_print_compositor_set_top_margin(compositor: *mut GtkSourcePrintCompositor, margin: c_double, unit: gtk::GtkUnit);
    pub fn gtk_source_print_compositor_set_wrap_mode(compositor: *mut GtkSourcePrintCompositor, wrap_mode: gtk::GtkWrapMode);

    //=========================================================================
    // GtkSourceRegion
    //=========================================================================
    pub fn gtk_source_region_get_type() -> GType;
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_region_new(buffer: *mut gtk::GtkTextBuffer) -> *mut GtkSourceRegion;
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_region_add_region(region: *mut GtkSourceRegion, region_to_add: *mut GtkSourceRegion);
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_region_add_subregion(region: *mut GtkSourceRegion, _start: *const gtk::GtkTextIter, _end: *const gtk::GtkTextIter);
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_region_get_bounds(region: *mut GtkSourceRegion, start: *mut gtk::GtkTextIter, end: *mut gtk::GtkTextIter) -> gboolean;
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_region_get_buffer(region: *mut GtkSourceRegion) -> *mut gtk::GtkTextBuffer;
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_region_get_start_region_iter(region: *mut GtkSourceRegion, iter: *mut GtkSourceRegionIter);
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_region_intersect_region(region1: *mut GtkSourceRegion, region2: *mut GtkSourceRegion) -> *mut GtkSourceRegion;
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_region_intersect_subregion(region: *mut GtkSourceRegion, _start: *const gtk::GtkTextIter, _end: *const gtk::GtkTextIter) -> *mut GtkSourceRegion;
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_region_is_empty(region: *mut GtkSourceRegion) -> gboolean;
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_region_subtract_region(region: *mut GtkSourceRegion, region_to_subtract: *mut GtkSourceRegion);
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_region_subtract_subregion(region: *mut GtkSourceRegion, _start: *const gtk::GtkTextIter, _end: *const gtk::GtkTextIter);
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_region_to_string(region: *mut GtkSourceRegion) -> *mut c_char;

    //=========================================================================
    // GtkSourceSearchContext
    //=========================================================================
    pub fn gtk_source_search_context_get_type() -> GType;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_context_new(buffer: *mut GtkSourceBuffer, settings: *mut GtkSourceSearchSettings) -> *mut GtkSourceSearchContext;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_context_backward(search: *mut GtkSourceSearchContext, iter: *const gtk::GtkTextIter, match_start: *mut gtk::GtkTextIter, match_end: *mut gtk::GtkTextIter) -> gboolean;
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_search_context_backward2(search: *mut GtkSourceSearchContext, iter: *const gtk::GtkTextIter, match_start: *mut gtk::GtkTextIter, match_end: *mut gtk::GtkTextIter, has_wrapped_around: *mut gboolean) -> gboolean;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_context_backward_async(search: *mut GtkSourceSearchContext, iter: *const gtk::GtkTextIter, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_context_backward_finish(search: *mut GtkSourceSearchContext, result: *mut gio::GAsyncResult, match_start: *mut gtk::GtkTextIter, match_end: *mut gtk::GtkTextIter, error: *mut *mut glib::GError) -> gboolean;
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_search_context_backward_finish2(search: *mut GtkSourceSearchContext, result: *mut gio::GAsyncResult, match_start: *mut gtk::GtkTextIter, match_end: *mut gtk::GtkTextIter, has_wrapped_around: *mut gboolean, error: *mut *mut glib::GError) -> gboolean;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_context_forward(search: *mut GtkSourceSearchContext, iter: *const gtk::GtkTextIter, match_start: *mut gtk::GtkTextIter, match_end: *mut gtk::GtkTextIter) -> gboolean;
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_search_context_forward2(search: *mut GtkSourceSearchContext, iter: *const gtk::GtkTextIter, match_start: *mut gtk::GtkTextIter, match_end: *mut gtk::GtkTextIter, has_wrapped_around: *mut gboolean) -> gboolean;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_context_forward_async(search: *mut GtkSourceSearchContext, iter: *const gtk::GtkTextIter, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_context_forward_finish(search: *mut GtkSourceSearchContext, result: *mut gio::GAsyncResult, match_start: *mut gtk::GtkTextIter, match_end: *mut gtk::GtkTextIter, error: *mut *mut glib::GError) -> gboolean;
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_search_context_forward_finish2(search: *mut GtkSourceSearchContext, result: *mut gio::GAsyncResult, match_start: *mut gtk::GtkTextIter, match_end: *mut gtk::GtkTextIter, has_wrapped_around: *mut gboolean, error: *mut *mut glib::GError) -> gboolean;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_context_get_buffer(search: *mut GtkSourceSearchContext) -> *mut GtkSourceBuffer;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_context_get_highlight(search: *mut GtkSourceSearchContext) -> gboolean;
    #[cfg(feature = "v3_16")]
    pub fn gtk_source_search_context_get_match_style(search: *mut GtkSourceSearchContext) -> *mut GtkSourceStyle;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_context_get_occurrence_position(search: *mut GtkSourceSearchContext, match_start: *const gtk::GtkTextIter, match_end: *const gtk::GtkTextIter) -> c_int;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_context_get_occurrences_count(search: *mut GtkSourceSearchContext) -> c_int;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_context_get_regex_error(search: *mut GtkSourceSearchContext) -> *mut glib::GError;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_context_get_settings(search: *mut GtkSourceSearchContext) -> *mut GtkSourceSearchSettings;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_context_replace(search: *mut GtkSourceSearchContext, match_start: *const gtk::GtkTextIter, match_end: *const gtk::GtkTextIter, replace: *const c_char, replace_length: c_int, error: *mut *mut glib::GError) -> gboolean;
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_search_context_replace2(search: *mut GtkSourceSearchContext, match_start: *mut gtk::GtkTextIter, match_end: *mut gtk::GtkTextIter, replace: *const c_char, replace_length: c_int, error: *mut *mut glib::GError) -> gboolean;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_context_replace_all(search: *mut GtkSourceSearchContext, replace: *const c_char, replace_length: c_int, error: *mut *mut glib::GError) -> c_uint;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_context_set_highlight(search: *mut GtkSourceSearchContext, highlight: gboolean);
    #[cfg(feature = "v3_16")]
    pub fn gtk_source_search_context_set_match_style(search: *mut GtkSourceSearchContext, match_style: *mut GtkSourceStyle);
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_context_set_settings(search: *mut GtkSourceSearchContext, settings: *mut GtkSourceSearchSettings);

    //=========================================================================
    // GtkSourceSearchSettings
    //=========================================================================
    pub fn gtk_source_search_settings_get_type() -> GType;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_settings_new() -> *mut GtkSourceSearchSettings;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_settings_get_at_word_boundaries(settings: *mut GtkSourceSearchSettings) -> gboolean;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_settings_get_case_sensitive(settings: *mut GtkSourceSearchSettings) -> gboolean;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_settings_get_regex_enabled(settings: *mut GtkSourceSearchSettings) -> gboolean;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_settings_get_search_text(settings: *mut GtkSourceSearchSettings) -> *const c_char;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_settings_get_wrap_around(settings: *mut GtkSourceSearchSettings) -> gboolean;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_settings_set_at_word_boundaries(settings: *mut GtkSourceSearchSettings, at_word_boundaries: gboolean);
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_settings_set_case_sensitive(settings: *mut GtkSourceSearchSettings, case_sensitive: gboolean);
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_settings_set_regex_enabled(settings: *mut GtkSourceSearchSettings, regex_enabled: gboolean);
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_settings_set_search_text(settings: *mut GtkSourceSearchSettings, search_text: *const c_char);
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_search_settings_set_wrap_around(settings: *mut GtkSourceSearchSettings, wrap_around: gboolean);

    //=========================================================================
    // GtkSourceSpaceDrawer
    //=========================================================================
    pub fn gtk_source_space_drawer_get_type() -> GType;
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_space_drawer_new() -> *mut GtkSourceSpaceDrawer;
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_space_drawer_bind_matrix_setting(drawer: *mut GtkSourceSpaceDrawer, settings: *mut gio::GSettings, key: *const c_char, flags: gio::GSettingsBindFlags);
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_space_drawer_get_enable_matrix(drawer: *mut GtkSourceSpaceDrawer) -> gboolean;
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_space_drawer_get_matrix(drawer: *mut GtkSourceSpaceDrawer) -> *mut glib::GVariant;
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_space_drawer_get_types_for_locations(drawer: *mut GtkSourceSpaceDrawer, locations: GtkSourceSpaceLocationFlags) -> GtkSourceSpaceTypeFlags;
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_space_drawer_set_enable_matrix(drawer: *mut GtkSourceSpaceDrawer, enable_matrix: gboolean);
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_space_drawer_set_matrix(drawer: *mut GtkSourceSpaceDrawer, matrix: *mut glib::GVariant);
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_space_drawer_set_types_for_locations(drawer: *mut GtkSourceSpaceDrawer, locations: GtkSourceSpaceLocationFlags, types: GtkSourceSpaceTypeFlags);

    //=========================================================================
    // GtkSourceStyle
    //=========================================================================
    pub fn gtk_source_style_get_type() -> GType;
    #[cfg(feature = "v3_22")]
    pub fn gtk_source_style_apply(style: *const GtkSourceStyle, tag: *mut gtk::GtkTextTag);
    pub fn gtk_source_style_copy(style: *const GtkSourceStyle) -> *mut GtkSourceStyle;

    //=========================================================================
    // GtkSourceStyleScheme
    //=========================================================================
    pub fn gtk_source_style_scheme_get_type() -> GType;
    pub fn gtk_source_style_scheme_get_authors(scheme: *mut GtkSourceStyleScheme) -> *mut *mut c_char;
    pub fn gtk_source_style_scheme_get_description(scheme: *mut GtkSourceStyleScheme) -> *const c_char;
    pub fn gtk_source_style_scheme_get_filename(scheme: *mut GtkSourceStyleScheme) -> *const c_char;
    pub fn gtk_source_style_scheme_get_id(scheme: *mut GtkSourceStyleScheme) -> *const c_char;
    pub fn gtk_source_style_scheme_get_name(scheme: *mut GtkSourceStyleScheme) -> *const c_char;
    pub fn gtk_source_style_scheme_get_style(scheme: *mut GtkSourceStyleScheme, style_id: *const c_char) -> *mut GtkSourceStyle;

    //=========================================================================
    // GtkSourceStyleSchemeChooserButton
    //=========================================================================
    pub fn gtk_source_style_scheme_chooser_button_get_type() -> GType;
    #[cfg(feature = "v3_16")]
    pub fn gtk_source_style_scheme_chooser_button_new() -> *mut gtk::GtkWidget;

    //=========================================================================
    // GtkSourceStyleSchemeChooserWidget
    //=========================================================================
    pub fn gtk_source_style_scheme_chooser_widget_get_type() -> GType;
    #[cfg(feature = "v3_16")]
    pub fn gtk_source_style_scheme_chooser_widget_new() -> *mut gtk::GtkWidget;

    //=========================================================================
    // GtkSourceStyleSchemeManager
    //=========================================================================
    pub fn gtk_source_style_scheme_manager_get_type() -> GType;
    pub fn gtk_source_style_scheme_manager_new() -> *mut GtkSourceStyleSchemeManager;
    pub fn gtk_source_style_scheme_manager_get_default() -> *mut GtkSourceStyleSchemeManager;
    pub fn gtk_source_style_scheme_manager_append_search_path(manager: *mut GtkSourceStyleSchemeManager, path: *const c_char);
    pub fn gtk_source_style_scheme_manager_force_rescan(manager: *mut GtkSourceStyleSchemeManager);
    pub fn gtk_source_style_scheme_manager_get_scheme(manager: *mut GtkSourceStyleSchemeManager, scheme_id: *const c_char) -> *mut GtkSourceStyleScheme;
    pub fn gtk_source_style_scheme_manager_get_scheme_ids(manager: *mut GtkSourceStyleSchemeManager) -> *mut *mut c_char;
    pub fn gtk_source_style_scheme_manager_get_search_path(manager: *mut GtkSourceStyleSchemeManager) -> *mut *mut c_char;
    pub fn gtk_source_style_scheme_manager_prepend_search_path(manager: *mut GtkSourceStyleSchemeManager, path: *const c_char);
    pub fn gtk_source_style_scheme_manager_set_search_path(manager: *mut GtkSourceStyleSchemeManager, path: *mut *mut c_char);

    //=========================================================================
    // GtkSourceTag
    //=========================================================================
    pub fn gtk_source_tag_get_type() -> GType;
    #[cfg(feature = "v3_20")]
    pub fn gtk_source_tag_new(name: *const c_char) -> *mut gtk::GtkTextTag;

    //=========================================================================
    // GtkSourceView
    //=========================================================================
    pub fn gtk_source_view_get_type() -> GType;
    pub fn gtk_source_view_new() -> *mut gtk::GtkWidget;
    pub fn gtk_source_view_new_with_buffer(buffer: *mut GtkSourceBuffer) -> *mut gtk::GtkWidget;
    pub fn gtk_source_view_get_auto_indent(view: *mut GtkSourceView) -> gboolean;
    #[cfg(feature = "v3_16")]
    pub fn gtk_source_view_get_background_pattern(view: *mut GtkSourceView) -> GtkSourceBackgroundPatternType;
    pub fn gtk_source_view_get_completion(view: *mut GtkSourceView) -> *mut GtkSourceCompletion;
    pub fn gtk_source_view_get_draw_spaces(view: *mut GtkSourceView) -> GtkSourceDrawSpacesFlags;
    pub fn gtk_source_view_get_gutter(view: *mut GtkSourceView, window_type: gtk::GtkTextWindowType) -> *mut GtkSourceGutter;
    pub fn gtk_source_view_get_highlight_current_line(view: *mut GtkSourceView) -> gboolean;
    pub fn gtk_source_view_get_indent_on_tab(view: *mut GtkSourceView) -> gboolean;
    pub fn gtk_source_view_get_indent_width(view: *mut GtkSourceView) -> c_int;
    pub fn gtk_source_view_get_insert_spaces_instead_of_tabs(view: *mut GtkSourceView) -> gboolean;
    pub fn gtk_source_view_get_mark_attributes(view: *mut GtkSourceView, category: *const c_char, priority: *mut c_int) -> *mut GtkSourceMarkAttributes;
    pub fn gtk_source_view_get_right_margin_position(view: *mut GtkSourceView) -> c_uint;
    pub fn gtk_source_view_get_show_line_marks(view: *mut GtkSourceView) -> gboolean;
    pub fn gtk_source_view_get_show_line_numbers(view: *mut GtkSourceView) -> gboolean;
    pub fn gtk_source_view_get_show_right_margin(view: *mut GtkSourceView) -> gboolean;
    #[cfg(feature = "v3_18")]
    pub fn gtk_source_view_get_smart_backspace(view: *mut GtkSourceView) -> gboolean;
    pub fn gtk_source_view_get_smart_home_end(view: *mut GtkSourceView) -> GtkSourceSmartHomeEndType;
    #[cfg(feature = "v3_24")]
    pub fn gtk_source_view_get_space_drawer(view: *mut GtkSourceView) -> *mut GtkSourceSpaceDrawer;
    pub fn gtk_source_view_get_tab_width(view: *mut GtkSourceView) -> c_uint;
    pub fn gtk_source_view_get_visual_column(view: *mut GtkSourceView, iter: *const gtk::GtkTextIter) -> c_uint;
    #[cfg(feature = "v3_16")]
    pub fn gtk_source_view_indent_lines(view: *mut GtkSourceView, start: *mut gtk::GtkTextIter, end: *mut gtk::GtkTextIter);
    pub fn gtk_source_view_set_auto_indent(view: *mut GtkSourceView, enable: gboolean);
    #[cfg(feature = "v3_16")]
    pub fn gtk_source_view_set_background_pattern(view: *mut GtkSourceView, background_pattern: GtkSourceBackgroundPatternType);
    pub fn gtk_source_view_set_draw_spaces(view: *mut GtkSourceView, flags: GtkSourceDrawSpacesFlags);
    pub fn gtk_source_view_set_highlight_current_line(view: *mut GtkSourceView, highlight: gboolean);
    pub fn gtk_source_view_set_indent_on_tab(view: *mut GtkSourceView, enable: gboolean);
    pub fn gtk_source_view_set_indent_width(view: *mut GtkSourceView, width: c_int);
    pub fn gtk_source_view_set_insert_spaces_instead_of_tabs(view: *mut GtkSourceView, enable: gboolean);
    pub fn gtk_source_view_set_mark_attributes(view: *mut GtkSourceView, category: *const c_char, attributes: *mut GtkSourceMarkAttributes, priority: c_int);
    pub fn gtk_source_view_set_right_margin_position(view: *mut GtkSourceView, pos: c_uint);
    pub fn gtk_source_view_set_show_line_marks(view: *mut GtkSourceView, show: gboolean);
    pub fn gtk_source_view_set_show_line_numbers(view: *mut GtkSourceView, show: gboolean);
    pub fn gtk_source_view_set_show_right_margin(view: *mut GtkSourceView, show: gboolean);
    #[cfg(feature = "v3_18")]
    pub fn gtk_source_view_set_smart_backspace(view: *mut GtkSourceView, smart_backspace: gboolean);
    pub fn gtk_source_view_set_smart_home_end(view: *mut GtkSourceView, smart_home_end: GtkSourceSmartHomeEndType);
    pub fn gtk_source_view_set_tab_width(view: *mut GtkSourceView, width: c_uint);
    #[cfg(feature = "v3_16")]
    pub fn gtk_source_view_unindent_lines(view: *mut GtkSourceView, start: *mut gtk::GtkTextIter, end: *mut gtk::GtkTextIter);

    //=========================================================================
    // GtkSourceCompletionProposal
    //=========================================================================
    pub fn gtk_source_completion_proposal_get_type() -> GType;
    pub fn gtk_source_completion_proposal_changed(proposal: *mut GtkSourceCompletionProposal);
    pub fn gtk_source_completion_proposal_equal(proposal: *mut GtkSourceCompletionProposal, other: *mut GtkSourceCompletionProposal) -> gboolean;
    #[cfg(feature = "v3_18")]
    pub fn gtk_source_completion_proposal_get_gicon(proposal: *mut GtkSourceCompletionProposal) -> *mut gio::GIcon;
    pub fn gtk_source_completion_proposal_get_icon(proposal: *mut GtkSourceCompletionProposal) -> *mut gdk_pixbuf::GdkPixbuf;
    #[cfg(feature = "v3_18")]
    pub fn gtk_source_completion_proposal_get_icon_name(proposal: *mut GtkSourceCompletionProposal) -> *const c_char;
    pub fn gtk_source_completion_proposal_get_info(proposal: *mut GtkSourceCompletionProposal) -> *mut c_char;
    pub fn gtk_source_completion_proposal_get_label(proposal: *mut GtkSourceCompletionProposal) -> *mut c_char;
    pub fn gtk_source_completion_proposal_get_markup(proposal: *mut GtkSourceCompletionProposal) -> *mut c_char;
    pub fn gtk_source_completion_proposal_get_text(proposal: *mut GtkSourceCompletionProposal) -> *mut c_char;
    pub fn gtk_source_completion_proposal_hash(proposal: *mut GtkSourceCompletionProposal) -> c_uint;

    //=========================================================================
    // GtkSourceCompletionProvider
    //=========================================================================
    pub fn gtk_source_completion_provider_get_type() -> GType;
    pub fn gtk_source_completion_provider_activate_proposal(provider: *mut GtkSourceCompletionProvider, proposal: *mut GtkSourceCompletionProposal, iter: *mut gtk::GtkTextIter) -> gboolean;
    pub fn gtk_source_completion_provider_get_activation(provider: *mut GtkSourceCompletionProvider) -> GtkSourceCompletionActivation;
    #[cfg(feature = "v3_18")]
    pub fn gtk_source_completion_provider_get_gicon(provider: *mut GtkSourceCompletionProvider) -> *mut gio::GIcon;
    pub fn gtk_source_completion_provider_get_icon(provider: *mut GtkSourceCompletionProvider) -> *mut gdk_pixbuf::GdkPixbuf;
    #[cfg(feature = "v3_18")]
    pub fn gtk_source_completion_provider_get_icon_name(provider: *mut GtkSourceCompletionProvider) -> *const c_char;
    pub fn gtk_source_completion_provider_get_info_widget(provider: *mut GtkSourceCompletionProvider, proposal: *mut GtkSourceCompletionProposal) -> *mut gtk::GtkWidget;
    pub fn gtk_source_completion_provider_get_interactive_delay(provider: *mut GtkSourceCompletionProvider) -> c_int;
    pub fn gtk_source_completion_provider_get_name(provider: *mut GtkSourceCompletionProvider) -> *mut c_char;
    pub fn gtk_source_completion_provider_get_priority(provider: *mut GtkSourceCompletionProvider) -> c_int;
    pub fn gtk_source_completion_provider_get_start_iter(provider: *mut GtkSourceCompletionProvider, context: *mut GtkSourceCompletionContext, proposal: *mut GtkSourceCompletionProposal, iter: *mut gtk::GtkTextIter) -> gboolean;
    pub fn gtk_source_completion_provider_match(provider: *mut GtkSourceCompletionProvider, context: *mut GtkSourceCompletionContext) -> gboolean;
    pub fn gtk_source_completion_provider_populate(provider: *mut GtkSourceCompletionProvider, context: *mut GtkSourceCompletionContext);
    pub fn gtk_source_completion_provider_update_info(provider: *mut GtkSourceCompletionProvider, proposal: *mut GtkSourceCompletionProposal, info: *mut GtkSourceCompletionInfo);

    //=========================================================================
    // GtkSourceStyleSchemeChooser
    //=========================================================================
    pub fn gtk_source_style_scheme_chooser_get_type() -> GType;
    #[cfg(feature = "v3_16")]
    pub fn gtk_source_style_scheme_chooser_get_style_scheme(chooser: *mut GtkSourceStyleSchemeChooser) -> *mut GtkSourceStyleScheme;
    #[cfg(feature = "v3_16")]
    pub fn gtk_source_style_scheme_chooser_set_style_scheme(chooser: *mut GtkSourceStyleSchemeChooser, scheme: *mut GtkSourceStyleScheme);

    //=========================================================================
    // GtkSourceUndoManager
    //=========================================================================
    pub fn gtk_source_undo_manager_get_type() -> GType;
    pub fn gtk_source_undo_manager_begin_not_undoable_action(manager: *mut GtkSourceUndoManager);
    pub fn gtk_source_undo_manager_can_redo(manager: *mut GtkSourceUndoManager) -> gboolean;
    pub fn gtk_source_undo_manager_can_redo_changed(manager: *mut GtkSourceUndoManager);
    pub fn gtk_source_undo_manager_can_undo(manager: *mut GtkSourceUndoManager) -> gboolean;
    pub fn gtk_source_undo_manager_can_undo_changed(manager: *mut GtkSourceUndoManager);
    pub fn gtk_source_undo_manager_end_not_undoable_action(manager: *mut GtkSourceUndoManager);
    pub fn gtk_source_undo_manager_redo(manager: *mut GtkSourceUndoManager);
    pub fn gtk_source_undo_manager_undo(manager: *mut GtkSourceUndoManager);

    //=========================================================================
    // Other functions
    //=========================================================================
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_utils_escape_search_text(text: *const c_char) -> *mut c_char;
    #[cfg(feature = "v3_10")]
    pub fn gtk_source_utils_unescape_search_text(text: *const c_char) -> *mut c_char;

}
